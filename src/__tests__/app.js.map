{
  "version": 3,
  "sources": ["../app.ts", "../services/user-service.ts", "../dtos/user-dto.ts", "../services/mail-service.ts", "../services/token-service.ts", "../exceptions/api-error.ts", "../services/media-service.ts", "../controllers/user-controller.ts", "../router/user-router.ts", "../middlewares/auth-middleware.ts", "../middlewares/validation-middleware.ts", "../services/author-service.ts", "../prisma-selects/author-select.ts", "../prisma-selects/author-individual-select.ts", "../prisma-selects/beat-for-author.ts", "../controllers/author-controller.ts", "../router/author-router.ts", "../services/beat-service.ts", "../prisma-selects/beat-individual-select.ts", "../prisma-selects/beat-select.ts", "../services/comment-service.ts", "../services/like-service.ts", "../controllers/beat-controller.ts", "../router/beat-router.ts", "../router/media-router.ts", "../controllers/media-controller.ts", "../router/index.ts", "../router/comment-router.ts", "../controllers/comment-controller.ts", "../router/tag-router.ts", "../services/tag-service.ts", "../controllers/tag-controller.ts", "../middlewares/error-middleware.ts"],
  "sourcesContent": ["import dotenv from \"dotenv\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport cookieParser from \"cookie-parser\";\nimport fileUpload from \"express-fileupload\";\nimport router from \"./router/index\";\nimport errorMiddleware from \"./middlewares/error-middleware\";\n\ndotenv.config();\n\nconst app = express();\n// enable req.ip\napp.set(\"trust proxy\", true);\n\napp.use(fileUpload());\napp.use(express.json({ limit: \"1000mb\" }));\napp.use(cookieParser());\napp.use(\n  cors({\n    credentials: true,\n    origin: process.env.CLIENT_URL,\n  })\n);\n\napp.use(\"/api\", router);\n\napp.use(errorMiddleware);\n\nexport default app;\n", "import PrismaClient from \"@prisma/client\";\nimport bcrypt from \"bcrypt\";\nimport { nanoid } from \"nanoid\";\n\nimport UserDto from \"../dtos/user-dto\";\nimport mailService from \"./mail-service\";\nimport tokenService from \"./token-service\";\nimport ApiError from \"../exceptions/api-error\";\nimport AuthResponse from \"../models/AuthResponse\";\n\nconst prisma = new PrismaClient.PrismaClient();\n\nclass UserService {\n  // tokens and login/register dto generator\n  async generateData(user: PrismaClient.User, ip: string, refresh: boolean): Promise<AuthResponse> {\n    // remove confidentional information from user data\n    const userDto = new UserDto(user);\n    // generate tokens\n    const tokens = tokenService.generateTokens(userDto, refresh);\n    // save resfresh token in DB\n    if (tokens.refreshToken) {\n      await tokenService.saveToken(userDto.id, ip, tokens.refreshToken);\n    }\n    return {\n      ...tokens,\n      user: userDto,\n    };\n  }\n\n  async register({\n    email,\n    username,\n    password,\n  }: Pick<PrismaClient.Prisma.UserCreateInput, \"email\" | \"username\" | \"password\">): Promise<UserDto> {\n    // check if username is already registered\n    const existingUser: PrismaClient.User | null = await prisma.user.findUnique({\n      where: { username },\n    });\n    if (existingUser != null) {\n      throw ApiError.BadRequest(`Username \"${username}\" is already taken.`);\n    }\n    // hash password\n    const hashedPassword: string = await bcrypt.hash(password, 3);\n    // generate unique activation link\n    const activationLink: string = nanoid(64);\n    const userCreateArgs: PrismaClient.Prisma.UserCreateArgs = {\n      data: {\n        email,\n        username,\n        password: hashedPassword,\n        activationLink,\n      },\n    };\n    const user = await prisma.user.create(userCreateArgs);\n    // send email with activation link\n    await mailService.sendActivationMail(email, `${process.env.BASE_URL!}/api/activate/${activationLink}`);\n    const userDto = new UserDto(user);\n    return userDto;\n  }\n\n  async activate(activationLink: string): Promise<void> {\n    // validate activation link\n    const user = await prisma.user.findUnique({\n      where: {\n        activationLink,\n      },\n    });\n    if (user == null) {\n      throw ApiError.BadRequest(\"Wrong activation link.\");\n    }\n    // update user isActivated state to true\n    await prisma.user.update({\n      where: {\n        activationLink,\n      },\n      data: {\n        isActivated: true,\n      },\n    });\n  }\n\n  async login(username: string, password: string, ip: string, refresh: boolean): Promise<AuthResponse> {\n    const user = await prisma.user.findUnique({\n      where: { username },\n    });\n    if (user == null) {\n      throw ApiError.UnauthorizedUser();\n    }\n    // compare passwords\n    const passwordEquals: boolean = await bcrypt.compare(password, user.password);\n    if (!passwordEquals) {\n      throw ApiError.UnauthorizedUser();\n    }\n    if (!user.isActivated) {\n      throw ApiError.NotActivatedEmail();\n    }\n    // create tokens and user DTO\n    const data = await this.generateData(user, ip, refresh);\n    return data;\n  }\n\n  async logout(refreshToken: string, ip: string): Promise<void> {\n    const token = await tokenService.findToken(refreshToken);\n    if (token == null || token.ip !== ip) {\n      throw ApiError.UnauthorizedUser();\n    }\n    // delete refresh token\n    await tokenService.removeToken(ip);\n  }\n\n  async refresh(refreshToken: string, ip: string): Promise<AuthResponse> {\n    // user data decoded from refresh token\n    const userData = tokenService.validateRefreshToken(refreshToken);\n    // check if token is in database\n    const tokenFromDb = await tokenService.findToken(refreshToken);\n    if (userData == null || tokenFromDb == null || tokenFromDb.ip !== ip) {\n      throw ApiError.UnauthorizedUser();\n    }\n    // find user\n    const user = await prisma.user.findUnique({\n      where: { id: userData.id },\n    });\n    // re-generate tokens and DTO\n    const data = await this.generateData(user!, ip, true);\n    return data;\n  }\n\n  async edit(userId: number, payload: PrismaClient.Prisma.UserUpdateInput): Promise<void> {\n    if (payload.username) {\n      // check if username isn't already registered\n      const existingUser: PrismaClient.User | null = await prisma.user.findUnique({\n        where: { username: payload.username as string },\n      });\n      if (existingUser != null) {\n        throw ApiError.BadRequest(`Username \"${payload.username as string}\" is already taken.`);\n      }\n    }\n    const userUpdateArgs: PrismaClient.Prisma.UserUpdateArgs = {\n      where: { id: userId },\n      data: payload,\n    };\n    await prisma.user.update(userUpdateArgs);\n  }\n\n  async getUserById(id: number): Promise<PrismaClient.User> {\n    const user = await prisma.user.findUnique({\n      where: { id },\n    });\n    if (user == null) {\n      throw ApiError.NotFound(\"User was not found.\");\n    }\n    return user;\n  }\n}\n\nexport default new UserService();\n", "import { User } from \"@prisma/client\";\n\nexport default class UserDto {\n  email: string;\n  username: string;\n  id: number;\n  image: string | null;\n  displayedName: string | null;\n\n  constructor(model: User) {\n    this.id = model.id;\n    this.email = model.email;\n    this.username = model.username;\n    this.displayedName = model.displayedName;\n    this.image = model.image;\n  }\n}\n", "import nodemailer from \"nodemailer\";\n\nclass MailService {\n  transporter: nodemailer.Transporter;\n  constructor() {\n    // nodemailer config\n    const opts = {\n      host: process.env.SMTP_HOST,\n      port: +process.env.SMTP_PORT!,\n      secure: false,\n      auth: {\n        user: process.env.SMTP_USER,\n        pass: process.env.SMTP_PASSWORD,\n      },\n    };\n    this.transporter = nodemailer.createTransport(opts);\n  }\n\n  async sendActivationMail(to: string, link: string) {\n    await this.transporter.sendMail({\n      from: process.env.SMTP_USER,\n      to,\n      subject: `\u0410\u043A\u0442\u0438\u0432\u0430\u0446\u0438\u044F \u0430\u043A\u043A\u0430\u0443\u043D\u0442\u0430 \u043D\u0430 ${process.env.BASE_URL}`,\n      html: `\n                    <div>\n                        <h1>\u0414\u043B\u044F \u0430\u043A\u0442\u0438\u0432\u0430\u0446\u0438\u0438 \u043F\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u043F\u043E \u0441\u0441\u044B\u043B\u043A\u0435:</h1>\n                        <a href=\"${link}\">${link}</a>\n                    </div>\n                `,\n    });\n  }\n}\n\nexport default new MailService();\n", "import jsonwebtoken, { JwtPayload } from \"jsonwebtoken\";\nimport PrismaClient from \"@prisma/client\";\nimport UserDto from \"../dtos/user-dto\";\n\nconst prisma = new PrismaClient.PrismaClient();\n\nclass TokenService {\n  generateTokens(\n    payload: UserDto,\n    refresh: boolean\n  ): {\n    accessToken: string;\n    refreshToken?: string;\n  } {\n    const tokens: {\n      accessToken: string;\n      refreshToken?: string;\n    } = {\n      accessToken: jsonwebtoken.sign(Object.assign({}, payload), process.env.JWT_ACCESS_SECRET!, {\n        expiresIn: \"30m\",\n      }),\n    };\n    if (refresh) {\n      tokens.refreshToken = jsonwebtoken.sign(Object.assign({}, payload), process.env.JWT_REFRESH_SECRET!, {\n        expiresIn: \"30d\",\n      });\n    }\n\n    return tokens;\n  }\n\n  async saveToken(userId: number, ip: string, refreshToken: string): Promise<PrismaClient.Token> {\n    // update existing refresh token or create new token\n    const tokenUpsertArgs: PrismaClient.Prisma.TokenUpsertArgs = {\n      where: {\n        ip,\n      },\n      update: {\n        refreshToken,\n      },\n      create: {\n        ip,\n        refreshToken,\n        user: {\n          connect: { id: userId },\n        },\n      },\n    };\n    const token = await prisma.token.upsert(tokenUpsertArgs);\n    return token;\n  }\n\n  // remove token for user logout\n  async removeToken(ip: string): Promise<PrismaClient.Token> {\n    const tokenDeleteArgs: PrismaClient.Prisma.TokenDeleteArgs = {\n      where: {\n        ip,\n      },\n    };\n    const token = await prisma.token.delete(tokenDeleteArgs);\n    return token;\n  }\n\n  // check for token existence\n  async findToken(refreshToken: string): Promise<PrismaClient.Token | null> {\n    const token = await prisma.token.findUnique({\n      where: {\n        refreshToken,\n      },\n    });\n    return token;\n  }\n\n  // decode data from given tokens\n  validateAccessToken(accessToken: string): null | JwtPayload {\n    try {\n      const decoded = jsonwebtoken.verify(accessToken, process.env.JWT_ACCESS_SECRET!) as JwtPayload;\n      // return user data\n      return decoded;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  validateRefreshToken(refreshToken: string): null | JwtPayload {\n    try {\n      const decoded = jsonwebtoken.verify(refreshToken, process.env.JWT_REFRESH_SECRET!) as JwtPayload;\n      // return user data\n      return decoded;\n    } catch (error) {\n      return null;\n    }\n  }\n}\nexport default new TokenService();\n", "export default class ApiError extends Error {\n  status: number;\n  errors: any[];\n\n  constructor(status: number, message: string, errors: any[] = []) {\n    super(message);\n    this.status = status;\n    this.errors = errors;\n  }\n\n  static UnauthorizedUser(): ApiError {\n    return new ApiError(401, \"Not authorized\");\n  }\n\n  static BadRequest(message: string, errors: any[] = []): ApiError {\n    return new ApiError(400, message, errors);\n  }\n\n  static NotFound(message: string, errors: any[] = []): ApiError {\n    return new ApiError(404, message, errors);\n  }\n\n  static NotActivatedEmail(): ApiError {\n    return new ApiError(403, \"Email is not confirmed\");\n  }\n}\n", "import aws from \"aws-sdk\";\nimport { UploadedFile } from \"express-fileupload\";\nimport { nanoid } from \"nanoid\";\nimport path from \"path\";\nimport ApiError from \"../exceptions/api-error\";\n\nconst awsConfig: aws.S3.ClientConfiguration = {\n  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY!,\n  accessKeyId: process.env.AWS_ACCESS_KEY_ID!,\n  region: process.env.AWS_BUCKET_REGION!,\n};\nconst s3 = new aws.S3(awsConfig);\n\nclass MediaService {\n  // file validation function with extension and maxSize\n  validate(file: UploadedFile, extensions?: string | string[], maxSize?: number) {\n    // extensions validation\n    if (extensions) {\n      // get file extension\n      const ext = path.extname(file.name);\n      // multiple\n      if (Array.isArray(extensions)) {\n        if (!extensions.includes(ext)) {\n          throw ApiError.BadRequest(`Send file in ${extensions.join(\"/\")} format.`);\n        }\n      } else {\n        // single\n        if (ext !== extensions) {\n          throw ApiError.BadRequest(`Send file in ${extensions} format.`);\n        }\n      }\n    }\n    // maxSize validation\n    if (maxSize) {\n      if (file.size > maxSize) {\n        throw ApiError.BadRequest(`Max file size is ${maxSize / 1024 / 1024}mb.`);\n      }\n    }\n  }\n\n  validateMedia(file: UploadedFile, path: string) {\n    switch (path) {\n      case \"image\": {\n        this.validate(file, [\".png\", \".jpg\", \".jpeg\"]);\n        break;\n      }\n      case \"mp3\": {\n        this.validate(\n          file,\n          \".mp3\",\n          // 150mb\n          150 * 1024 * 1024\n        );\n        break;\n      }\n      case \"wav\": {\n        this.validate(\n          file,\n          \".wav\",\n          // 300mb\n          300 * 1024 * 1024\n        );\n        break;\n      }\n      case \"stems\": {\n        this.validate(\n          file,\n          [\".zip\", \".rar\"],\n          // 500mb\n          500 * 1024 * 1024\n        );\n        break;\n      }\n    }\n  }\n\n  // upload a file to aws s3 bucket\n  async awsUpload(file: UploadedFile, path: string): Promise<aws.S3.Object> {\n    const params: aws.S3.PutObjectRequest = {\n      Bucket: process.env.AWS_BUCKET_NAME!,\n      Key: path + \"/\" + nanoid(36),\n      Body: file.data,\n    };\n    return await s3.upload(params).promise();\n  }\n\n  async deleteObject(key: string) {\n    const params: aws.S3.DeleteObjectRequest = {\n      Key: key,\n      Bucket: process.env.AWS_BUCKET_NAME!,\n    };\n    return await s3.deleteObject(params).promise();\n  }\n\n  // get a file from aws s3 bucket and send it to the client\n  async getMedia(key: string): Promise<aws.Request<aws.S3.GetObjectOutput, aws.AWSError>> {\n    const data = await s3.getObject({\n      Bucket: process.env.AWS_BUCKET_NAME!,\n      Key: key,\n    });\n    return data;\n  }\n}\n\nexport default new MediaService();\n", "import userService from \"../services/user-service\";\nimport ApiError from \"../exceptions/api-error\";\nimport { Request, Response, NextFunction } from \"express\";\nimport PrismaClient from \"@prisma/client\";\nimport mediaService from \"../services/media-service\";\nimport UserDto from \"dtos/user-dto\";\n\nclass UserController {\n  async register(req: Request, res: Response, next: NextFunction) {\n    try {\n      const payload: Pick<\n        PrismaClient.Prisma.UserCreateInput,\n        // activationLink is generated automatically, so we don't need to pass it in the payload type\n        \"email\" | \"username\" | \"password\"\n      > = (({ email, username, password }: Record<string, string>) => ({\n        email,\n        username,\n        password,\n      }))(req.body);\n      const userDto = await userService.register(payload);\n      return res.json(userDto);\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async login(req: Request, res: Response, next: NextFunction) {\n    try {\n      const ip = req.ip;\n      const { username, password, refresh }: { username: string; password: string; refresh: boolean } = req.body;\n      const userData = await userService.login(username, password, ip, !!refresh);\n      if (!!refresh) {\n        // set refresh token httpOnly cookie\n        res.cookie(\"refreshToken\", userData.refreshToken, {\n          // 30 days\n          maxAge: 30 * 24 * 60 * 1000,\n          httpOnly: true,\n          secure: process.env.NODE_ENV === \"production\",\n        });\n      }\n      return res.json({ accessToken: userData.accessToken, user: userData.user });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async logout(req: Request, res: Response, next: NextFunction) {\n    try {\n      const ip = req.ip;\n      const { refreshToken }: { refreshToken: string } = req.cookies;\n      if (!refreshToken) {\n        next(ApiError.UnauthorizedUser());\n        return;\n      }\n      await userService.logout(refreshToken, ip);\n      // remove cookie with refresh token\n      res.clearCookie(\"resfreshToken\");\n      return res.json(\"sucess\");\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async activate(req: Request, res: Response, next: NextFunction) {\n    try {\n      const { activationLink } = req.params;\n      await userService.activate(activationLink);\n      return res.json(\"success\");\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async refresh(req: Request, res: Response, next: NextFunction) {\n    try {\n      const ip = req.ip;\n      const { refreshToken }: { refreshToken: string } = req.cookies;\n      if (!refreshToken) {\n        next(ApiError.UnauthorizedUser());\n        return;\n      }\n      const userData = await userService.refresh(refreshToken, ip);\n      // update refresh token cookie\n      res.cookie(\"refreshToken\", userData.refreshToken, {\n        // 30 days\n        maxAge: 30 * 24 * 60 * 1000,\n        httpOnly: true,\n        secure: process.env.NODE_ENV === \"production\",\n      });\n      return res.json(userData);\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async edit(req: Request, res: Response, next: NextFunction) {\n    try {\n      const userId = req.user!.id;\n      const original = await userService.getUserById(userId);\n      const payload: PrismaClient.Prisma.UserUpdateInput = (({\n        username,\n        displayedName,\n        about,\n        vk,\n        youtube,\n        instagram,\n        image,\n      }: Record<string, string>) => ({ username, displayedName, about, vk, youtube, instagram, image }))(req.body);\n      // delete old profile image, if it's updated\n      if (payload.image && original.image) {\n        mediaService.deleteObject(original.image);\n      }\n      await userService.edit(userId, payload);\n\n      return res.json(\"success\");\n    } catch (error) {\n      next(error);\n    }\n  }\n}\n\nexport default new UserController();\n", "import userController from \"../controllers/user-controller\";\nimport { body } from \"express-validator\";\nimport { Router } from \"express\";\nimport authMiddleware from \"../middlewares/auth-middleware\";\nimport validationMiddleware from \"../middlewares/validation-middleware\";\n\nconst router = Router();\n\n// registration\nrouter.post(\n  \"/register\",\n  body(\"email\").isEmail().bail(),\n  body(\"username\")\n    .notEmpty()\n    .bail()\n    // numbers and letters only\n    .matches(/^[0-9a-zA-Z]+$/)\n    .bail(),\n  body(\"password\").isLength({ min: 8 }).bail().matches(/\\d/).bail().matches(/[A-Z]/).bail(),\n  validationMiddleware,\n  userController.register\n);\n\n// login\nrouter.post(\n  \"/login\",\n  body(\"username\").notEmpty().bail(),\n  body(\"password\").notEmpty().bail(),\n  validationMiddleware,\n  userController.login\n);\n\n// users data editing\nrouter.post(\n  \"/edit\",\n  authMiddleware,\n  body(\"username\")\n    .if(body(\"username\").exists())\n    .matches(/^[0-9a-zA-Z]+$/)\n    .bail(),\n  body(\"displayedName\").if(body(\"displayedName\").exists()).isLength({ max: 255 }).bail(),\n  body(\"about\").if(body(\"about\").exists()).isLength({ max: 255 }).bail(),\n  body(\"youtube\").if(body(\"youtube\").exists()).isLength({ max: 255 }).bail(),\n  body(\"vk\").if(body(\"vk\").exists()).isLength({ max: 255 }).bail(),\n  body(\"instagram\").if(body(\"instagram\").exists()).isLength({ max: 255 }).bail(),\n  validationMiddleware,\n  userController.edit\n);\n\n// logout\nrouter.post(\"/logout\", userController.logout);\n\n// email activation\nrouter.get(\"/activate/:activationLink\", userController.activate);\n\n// refresh tokens\nrouter.get(\"/refresh\", userController.refresh);\n\nexport default router;\n", "import ApiError from \"../exceptions/api-error\";\nimport tokenService from \"../services/token-service\";\nimport { Request, Response, NextFunction } from \"express\";\nimport UserDto from \"../dtos/user-dto\";\n\nexport default async function (req: Request, res: Response, next: NextFunction) {\n  try {\n    // request authorization header with access token\n    const authHeader = req.headers.authorization;\n    if (!authHeader) {\n      next(ApiError.UnauthorizedUser());\n      return;\n    }\n    // 'Bearer ...token' split\n    const accessToken = authHeader.split(\" \")[1];\n    if (!accessToken) {\n      next(ApiError.UnauthorizedUser());\n      return;\n    }\n    const userData = tokenService.validateAccessToken(accessToken) as UserDto;\n    if (!userData) {\n      next(ApiError.UnauthorizedUser());\n      return;\n    }\n    req.user = userData;\n    next();\n  } catch (error) {\n    next(ApiError.UnauthorizedUser());\n  }\n}\n", "import { Request, Response, NextFunction } from \"express\";\nimport { validationResult } from \"express-validator\";\nimport ApiError from \"../exceptions/api-error\";\n\n// express-validator errors handling\nexport default async function (req: Request, res: Response, next: NextFunction) {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    next(ApiError.BadRequest(\"Data validation error\", errors.array()));\n    return;\n  }\n  next();\n}\n", "import PrismaClient from \"@prisma/client\";\nimport authorSelect, { Author } from \"../prisma-selects/author-select\";\nimport authorIndividualSelect, { AuthorIndividual } from \"../prisma-selects/author-individual-select\";\nimport ApiError from \"../exceptions/api-error\";\n\nconst prisma = new PrismaClient.PrismaClient();\n\nclass AuthorService {\n  // returns all authors\n  async getAuthors(viewed: number): Promise<Author[]> {\n    const authors = await prisma.user.findMany({\n      ...authorSelect,\n      take: 10,\n      skip: viewed,\n    });\n    return authors;\n  }\n\n  // find author by query (username or displayedName)\n  async findAuthors(query: string, viewed: number): Promise<Author[]> {\n    const authorFindManyArgs = {\n      where: {\n        OR: [\n          {\n            username: {\n              contains: query,\n            },\n          },\n          {\n            displayedName: {\n              contains: query,\n            },\n          },\n        ],\n      },\n      ...authorSelect,\n      take: 10,\n      skip: viewed,\n    };\n    const authors = await prisma.user.findMany(authorFindManyArgs);\n    return authors;\n  }\n\n  // individual author data\n  async getAuthorByUsername(username: string): Promise<AuthorIndividual> {\n    const authorFindUniqueArgs = {\n      where: {\n        username,\n      },\n      ...authorIndividualSelect,\n    };\n    const author = await prisma.user.findUnique(authorFindUniqueArgs);\n    if (author == null) {\n      throw ApiError.NotFound(\"Author was not found.\");\n    }\n    return author;\n  }\n}\n\nexport default new AuthorService();\n", "import PrismaClient from \"@prisma/client\";\nconst authorSelect = PrismaClient.Prisma.validator<PrismaClient.Prisma.UserArgs>()({\n  select: {\n    id: true,\n    username: true,\n    displayedName: true,\n    image: true,\n  },\n});\nexport type Author = PrismaClient.Prisma.UserGetPayload<typeof authorSelect>;\nexport default authorSelect;\n", "import PrismaClient from \"@prisma/client\";\nimport beatForAuthorSelect from \"./beat-for-author\";\nconst authorIndividualSelect = PrismaClient.Prisma.validator<PrismaClient.Prisma.UserArgs>()({\n  select: {\n    id: true,\n    username: true,\n    createdAt: true,\n    displayedName: true,\n    about: true,\n    image: true,\n    beats: {\n      ...beatForAuthorSelect,\n    },\n    youtube: true,\n    instagram: true,\n    vk: true,\n    _count: {\n      select: {\n        beats: true,\n      },\n    },\n  },\n});\nexport type AuthorIndividual = PrismaClient.Prisma.UserGetPayload<typeof authorIndividualSelect>;\nexport default authorIndividualSelect;\n", "import PrismaClient from \"@prisma/client\";\nconst beatForAuthorSelect = PrismaClient.Prisma.validator<PrismaClient.Prisma.BeatArgs>()({\n  select: {\n    id: true,\n    name: true,\n    bpm: true,\n    image: true,\n    mp3: true,\n    wavePrice: true,\n    tags: true,\n  },\n});\nexport type BeatForAuthor = PrismaClient.Prisma.BeatGetPayload<typeof beatForAuthorSelect>;\nexport default beatForAuthorSelect;\n", "import authorService from \"../services/author-service\";\nimport { Request, Response, NextFunction } from \"express\";\nimport { Author } from \"../prisma-selects/author-select\";\nimport { AuthorIndividual } from \"../prisma-selects/author-individual-select\";\n\nclass AuthorController {\n  async getAuthors(req: Request, res: Response, next: NextFunction) {\n    try {\n      let authors: Author[] | undefined;\n      if (req.query.q) {\n        // find authors with query\n        authors = await authorService.findAuthors(req.query.q as string, req.query.viewed ? +req.query.viewed : 0);\n      } else {\n        // get all authors\n        authors = await authorService.getAuthors(req.query.viewed ? +req.query.viewed : 0);\n      }\n      return res.json({\n        authors,\n        viewed: req.query.viewed ? +req.query.viewed + authors.length : authors.length,\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  // get individual author data\n  async getIndividualAuthor(req: Request, res: Response, next: NextFunction) {\n    try {\n      const username = req.params.username;\n      const author: AuthorIndividual = await authorService.getAuthorByUsername(username);\n      return res.json(author);\n    } catch (error) {\n      next(error);\n    }\n  }\n}\n\nexport default new AuthorController();\n", "import authorController from \"../controllers/author-controller\";\nimport { Router } from \"express\";\nimport validationMiddleware from \"../middlewares/validation-middleware\";\nimport { query } from \"express-validator\";\nconst router = Router();\n\n// get many authors\nrouter.get(\n  \"/\",\n  query(\"viewed\").if(query(\"viewed\").exists()).isDecimal().bail(),\n  validationMiddleware,\n  authorController.getAuthors\n);\n\n// get individual author\nrouter.get(\"/:username\", authorController.getIndividualAuthor);\n\nexport default router;\n", "import PrismaClient from \"@prisma/client\";\n\nimport ApiError from \"../exceptions/api-error\";\nimport beatIndividualSelect, { BeatIndividual } from \"../prisma-selects/beat-individual-select\";\nimport beatSelect, { Beat } from \"../prisma-selects/beat-select\";\nimport mediaService from \"./media-service\";\nconst prisma = new PrismaClient.PrismaClient();\n\nexport interface BeatIndividualWithRelated extends BeatIndividual {\n  related: Beat[];\n}\n\nclass BeatService {\n  // get all beats\n  async getBeats(viewed = 0): Promise<Beat[]> {\n    const beats = await prisma.beat.findMany({\n      ...beatSelect,\n      skip: viewed,\n      take: 10,\n    });\n    return beats;\n  }\n\n  formatBeatOrderBy(orderBy: string): PrismaClient.Prisma.BeatAvgOrderByAggregateInput {\n    if (orderBy.includes(\"Lower\")) {\n      return {\n        [orderBy.slice(0, -5)]: \"asc\",\n      };\n    }\n    if (orderBy.includes(\"Higher\")) {\n      return {\n        [orderBy.slice(0, -6)]: \"desc\",\n      };\n    }\n    return {\n      id: \"desc\",\n    };\n  }\n\n  // find beats with query\n  async findBeats(\n    { q, bpm, tags, orderBy }: { q?: string; bpm?: number; tags?: string[]; orderBy?: string },\n    viewed = 0\n  ): Promise<Beat[]> {\n    let nameQuery: PrismaClient.Prisma.BeatWhereInput = {};\n    if (q) {\n      nameQuery = {\n        OR: [\n          {\n            name: {\n              contains: q,\n              mode: \"insensitive\",\n            },\n          },\n          {\n            user: {\n              OR: [\n                {\n                  username: {\n                    contains: q,\n                    mode: \"insensitive\",\n                  },\n                },\n                {\n                  displayedName: {\n                    contains: q,\n                    mode: \"insensitive\",\n                  },\n                },\n              ],\n            },\n          },\n        ],\n      };\n    }\n    const queryArgs: PrismaClient.Prisma.BeatFindManyArgs = {\n      take: 10,\n      skip: viewed,\n      orderBy: orderBy\n        ? this.formatBeatOrderBy(orderBy)\n        : {\n            id: \"desc\",\n          },\n      where: {\n        ...nameQuery,\n        bpm: {\n          equals: bpm,\n        },\n        tags:\n          tags != null\n            ? {\n                some: {\n                  name: {\n                    in: tags,\n                  },\n                },\n              }\n            : undefined,\n      },\n    };\n    const beats = await prisma.beat.findMany({ ...queryArgs, ...beatSelect });\n    return beats;\n  }\n\n  async getIndividualBeat(id: number): Promise<BeatIndividualWithRelated> {\n    const beatFindUniqueArgs = {\n      where: {\n        id,\n      },\n      ...beatIndividualSelect,\n    };\n    const beat = await prisma.beat.findUnique(beatFindUniqueArgs);\n    if (beat == null) {\n      throw ApiError.NotFound(\"Beat was not found.\");\n    }\n    // related beats (beats with same tags or author)\n    const relatedBeats = await this.findBeats({\n      tags: beat.tags.map((item: PrismaClient.Tag) => item.name),\n      q: beat.user.username,\n    });\n    return {\n      ...beat,\n      related: relatedBeats.filter((item) => item.id !== beat.id),\n    };\n  }\n\n  async getBeatById(id: number): Promise<PrismaClient.Beat> {\n    const beat = await prisma.beat.findUnique({\n      where: {\n        id,\n      },\n    });\n    if (beat == null) {\n      throw ApiError.NotFound(\"Beat was not found.\");\n    }\n    return beat;\n  }\n\n  async beatAwsDelete(beat: PrismaClient.Beat) {\n    const fileData: any = [null, null, null, null];\n    fileData[0] = mediaService.deleteObject(beat.wave);\n    fileData[1] = mediaService.deleteObject(beat.mp3);\n    if (beat.image) {\n      fileData[2] = mediaService.deleteObject(beat.image);\n    }\n    if (beat.stems) {\n      fileData[3] = mediaService.deleteObject(beat.stems);\n    }\n    // async files deletion\n    return await Promise.all(fileData);\n  }\n\n  async uploadBeat(data: PrismaClient.Prisma.BeatCreateInput): Promise<BeatIndividual> {\n    const beat = await prisma.beat.create({\n      data,\n      ...beatIndividualSelect,\n    });\n    return beat;\n  }\n\n  async editBeat(beatId: number, data: PrismaClient.Prisma.BeatUpdateInput): Promise<BeatIndividual> {\n    const beat = await prisma.beat.update({\n      where: {\n        id: beatId,\n      },\n      data,\n      ...beatIndividualSelect,\n    });\n    return beat;\n  }\n\n  async deleteBeat(beat: PrismaClient.Beat) {\n    // delete media files from AWS S3\n    await this.beatAwsDelete(beat);\n    // delete beat from db\n    await prisma.beat.delete({\n      where: {\n        id: beat.id,\n      },\n    });\n  }\n}\n\nexport default new BeatService();\n", "import PrismaClient from \"@prisma/client\";\nimport authorSelect from \"./author-select\";\nconst beatIndividualSelect = PrismaClient.Prisma.validator<PrismaClient.Prisma.BeatArgs>()({\n  select: {\n    id: true,\n    name: true,\n    bpm: true,\n    description: true,\n    createdAt: true,\n    downloads: true,\n    plays: true,\n    image: true,\n    mp3: true,\n    wavePrice: true,\n    stemsPrice: true,\n    tags: true,\n    user: {\n      ...authorSelect,\n    },\n    comments: {\n      take: 10,\n      select: {\n        content: true,\n        user: {\n          ...authorSelect,\n        },\n      },\n    },\n    _count: {\n      select: {\n        likes: true,\n      },\n    },\n  },\n});\nexport type BeatIndividual = PrismaClient.Prisma.BeatGetPayload<typeof beatIndividualSelect>;\nexport default beatIndividualSelect;\n", "import PrismaClient from \"@prisma/client\";\nconst beatSelect = PrismaClient.Prisma.validator<PrismaClient.Prisma.BeatArgs>()({\n  select: {\n    id: true,\n    name: true,\n    bpm: true,\n    image: true,\n    mp3: true,\n    wavePrice: true,\n    user: {\n      select: {\n        id: true,\n        username: true,\n        displayedName: true,\n      },\n    },\n  },\n});\nexport type Beat = PrismaClient.Prisma.BeatGetPayload<typeof beatSelect>;\nexport default beatSelect;\n", "import PrismaClient from \"@prisma/client\";\nconst prisma = new PrismaClient.PrismaClient();\n\nclass CommentService {\n  async uploadComment(data: PrismaClient.Prisma.CommentCreateInput) {\n    const comment = await prisma.comment.create({\n      data,\n    });\n    return comment;\n  }\n\n  async getComments(beatId: number, viewed = 0) {\n    const comments = await prisma.comment.findMany({\n      where: {\n        beatId,\n      },\n      take: 10,\n      skip: viewed,\n    });\n    return comments;\n  }\n\n  async getCommentById(commentId: number) {\n    const comment = await prisma.comment.findUnique({\n      where: { id: commentId },\n    });\n    return comment;\n  }\n\n  async deleteComment(commentId: number): Promise<void> {\n    await prisma.comment.delete({\n      where: { id: commentId },\n    });\n  }\n}\n\nexport default new CommentService();\n", "import PrismaClient from \"@prisma/client\";\nconst prisma = new PrismaClient.PrismaClient();\n\nclass LikeService {\n  async getLikeByIdentifier(beatId: number, userId: number): Promise<PrismaClient.Like | null> {\n    const like = await prisma.like.findUnique({\n      where: {\n        likeIdentifier: { userId, beatId },\n      },\n    });\n    return like;\n  }\n\n  async deleteLike(beatId: number, userId: number): Promise<PrismaClient.Like | null> {\n    const like = await prisma.like.delete({\n      where: {\n        likeIdentifier: { userId, beatId },\n      },\n    });\n    return like;\n  }\n\n  async createLike(beatId: number, userId: number): Promise<PrismaClient.Like | null> {\n    const like = await prisma.like.create({\n      data: {\n        user: {\n          connect: { id: userId },\n        },\n        beat: {\n          connect: { id: beatId },\n        },\n      },\n    });\n    return like;\n  }\n}\n\nexport default new LikeService();\n", "import ApiError from \"../exceptions/api-error\";\nimport beatService from \"../services/beat-service\";\nimport { Request, Response, NextFunction } from \"express\";\nimport PrismaClient from \"@prisma/client\";\nimport commentService from \"../services/comment-service\";\nimport likeService from \"../services/like-service\";\nimport { Beat } from \"../prisma-selects/beat-select\";\nimport { BeatIndividual } from \"../prisma-selects/beat-individual-select\";\nimport mediaService from \"../services/media-service\";\n\nclass BeatController {\n  // find many beats\n  async getBeats(req: Request, res: Response, next: NextFunction) {\n    try {\n      let beats: Beat[];\n      if (Object.keys(req.query).length > 0) {\n        const query: { q?: string; bpm?: number; tags?: string[]; orderBy?: string } = (({\n          q,\n          bpm,\n          tags,\n          orderBy,\n        }) => ({\n          q,\n          bpm: bpm ? +bpm : undefined,\n          tags: tags ? tags.split(\",\") : undefined,\n          orderBy,\n        }))(req.query as Record<string, string>);\n        beats = await beatService.findBeats(query, req.query.viewed ? +req.query.viewed : 0);\n      } else {\n        // get all beats\n        beats = await beatService.getBeats(req.query.viewed ? +req.query.viewed : 0);\n      }\n      return res.json({\n        beats,\n        viewed: req.query.viewed ? +req.query.viewed + beats.length : beats.length,\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  // get individual beat data\n  async getIndividualBeat(req: Request, res: Response, next: NextFunction) {\n    try {\n      const id = +req.params.id;\n      const beat: BeatIndividual = await beatService.getIndividualBeat(id);\n      return res.json(beat);\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  // beat upload\n  async upload(req: Request, res: Response, next: NextFunction) {\n    try {\n      const userId = req.user!.id;\n      const payload: PrismaClient.Prisma.BeatCreateInput = (({\n        name,\n        bpm,\n        description,\n        tags,\n\n        stemsPrice,\n        wavePrice,\n\n        wave,\n        mp3,\n        stems,\n        image,\n      }: Record<string, string>) => ({\n        name,\n        bpm: bpm ? +bpm : undefined,\n        description,\n        tags: tags\n          ? {\n              connectOrCreate: tags.split(\",\").map((tag: string) => {\n                if (tag.match(/^[0-9a-zA-Z]+$/) == null) {\n                  throw ApiError.BadRequest(\"Wrong tags\");\n                }\n                return {\n                  where: { name: tag },\n                  create: { name: tag },\n                };\n              }),\n            }\n          : undefined,\n\n        stemsPrice: stemsPrice ? +stemsPrice : undefined,\n        wavePrice: +wavePrice,\n\n        wave,\n        mp3,\n        stems,\n        image,\n\n        user: {\n          connect: { id: userId },\n        },\n      }))(req.body);\n      const beat = await beatService.uploadBeat(payload);\n      return res.json(beat);\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async edit(req: Request, res: Response, next: NextFunction) {\n    try {\n      const userId = req.user!.id;\n      const original = await beatService.getBeatById(+req.params.id);\n      if (userId !== original.userId) {\n        next(ApiError.UnauthorizedUser());\n        return;\n      }\n      const payload: PrismaClient.Prisma.BeatUpdateInput = (({\n        name,\n        bpm,\n        description,\n        tags,\n\n        wavePrice,\n        stemsPrice,\n\n        image,\n        wave,\n        mp3,\n        stems,\n      }) => ({\n        name,\n        bpm: +bpm,\n        description,\n        tags: tags\n          ? {\n              set: [],\n              connectOrCreate: tags.split(\",\").map((tag: string) => {\n                return {\n                  where: { name: tag },\n                  create: { name: tag },\n                };\n              }),\n            }\n          : undefined,\n\n        wavePrice: +wavePrice,\n        stemsPrice: +stemsPrice,\n\n        image,\n        wave,\n        mp3,\n        stems,\n      }))(req.body);\n      const merged = { ...original, ...payload };\n      if ((merged.stemsPrice && !merged.stems) || (merged.stems && !merged.stemsPrice)) {\n        next(ApiError.BadRequest(\"Provide both stems and stems price\"));\n        return;\n      }\n      const mediaFileKeys = [\"mp3\", \"wave\", \"stems\", \"image\"] as const;\n      for (const key of mediaFileKeys) {\n        if (payload[key] && original[key]) {\n          mediaService.deleteObject(original[key]!);\n        }\n      }\n      const beat = await beatService.editBeat(original.id, payload);\n      return res.json(beat);\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async comment(req: Request, res: Response, next: NextFunction) {\n    try {\n      const userId = req.user!.id;\n      const id = +req.params.id;\n      // has error throw inside, if beat doesn't exist\n      const beat = await beatService.getBeatById(id);\n      const payload: PrismaClient.Prisma.CommentCreateInput = {\n        user: {\n          connect: { id: userId },\n        },\n        beat: {\n          connect: { id: beat.id },\n        },\n        content: req.body.content,\n      };\n      const comment = await commentService.uploadComment(payload);\n      return res.json(comment);\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async likeToggle(req: Request, res: Response, next: NextFunction) {\n    try {\n      const userId = req.user!.id;\n      const id = +req.params.id;\n      // Has built in 404 Throw\n      const beat = await beatService.getBeatById(id);\n      let like: PrismaClient.Like | null;\n      like = await likeService.getLikeByIdentifier(beat.id, userId);\n      if (like != null) {\n        // delete the like from db\n        like = await likeService.deleteLike(beat.id, userId);\n      } else {\n        // create like\n        like = await likeService.createLike(beat.id, userId);\n      }\n      return res.json(like);\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async delete(req: Request, res: Response, next: NextFunction) {\n    try {\n      const userId = req.user!.id;\n      const id = +req.params.id;\n      // Has built in 404 Throw\n      const beat = await beatService.getBeatById(id);\n      if (userId !== beat.userId) {\n        next(ApiError.UnauthorizedUser());\n        return;\n      }\n      await beatService.deleteBeat(beat);\n      return res.json(\"success\");\n    } catch (error) {\n      next(error);\n    }\n  }\n}\n\nexport default new BeatController();\n", "import beatController from \"../controllers/beat-controller\";\nimport authMiddleware from \"../middlewares/auth-middleware\";\nimport { body, param, query } from \"express-validator\";\nimport { Router } from \"express\";\nimport validationMiddleware from \"../middlewares/validation-middleware\";\nconst router = Router();\n\nrouter.post(\n  \"/upload\",\n  authMiddleware,\n  // name required, 255 characters max\n  body(\"name\").notEmpty().bail().isLength({ max: 255 }).bail(),\n  // wavePrice required, numeric\n  body(\"wavePrice\").notEmpty().bail().isDecimal().bail(),\n  body(\"wave\").notEmpty().bail().contains(\"wave/\").bail(),\n  body(\"mp3\").notEmpty().bail().contains(\"mp3/\").bail(),\n  // stemsPrice numeric\n  body(\"stemsPrice\").if(body(\"stemsPrice\").exists()).isDecimal().bail(),\n  body(\"stemsPrice\").if(body(\"stems\").exists()).notEmpty().bail(),\n  body(\"stems\").if(body(\"stems\").exists()).contains(\"stems/\").bail(),\n  body(\"stems\").if(body(\"stemsPrice\").exists()).notEmpty().bail(),\n  body(\"image\").if(body(\"image\").exists()).contains(\"image/\").bail(),\n  // bpm numeric\n  body(\"bpm\").if(body(\"bpm\").exists()).isDecimal().bail(),\n  // description 255 characters max\n  body(\"description\").if(body(\"description\").exists()).isLength({ max: 255 }).bail(),\n  validationMiddleware,\n  beatController.upload\n);\n\nrouter.get(\n  \"/\",\n  query(\"viewed\").if(query(\"viewed\").exists()).isDecimal().bail(),\n  validationMiddleware,\n  beatController.getBeats\n);\n\nrouter.get(\"/:id\", param(\"id\").isDecimal().bail(), validationMiddleware, beatController.getIndividualBeat);\n\nrouter.post(\n  \"/:id/comment\",\n  authMiddleware,\n  param(\"id\").isDecimal().bail(),\n  body(\"content\").notEmpty().isLength({ max: 255 }).bail(),\n  validationMiddleware,\n  beatController.comment\n);\n\nrouter.post(\n  \"/:id/like\",\n  authMiddleware,\n  param(\"id\").isDecimal().bail(),\n  validationMiddleware,\n  beatController.likeToggle\n);\n\nrouter.post(\"/:id/delete\", authMiddleware, param(\"id\").isDecimal().bail(), validationMiddleware, beatController.delete);\n\nrouter.post(\n  \"/:id/edit\",\n  authMiddleware,\n  param(\"id\").isDecimal().bail(),\n  body(\"name\").if(body(\"name\").exists()).isLength({ max: 255 }).bail(),\n  body(\"wavePrice\").if(body(\"wavePrice\").exists()).isDecimal().bail(),\n  body(\"wave\").if(body(\"wave\").exists()).contains(\"wave/\").bail(),\n  body(\"mp3\").if(body(\"mp3\").exists()).contains(\"mp3/\").bail(),\n  body(\"stemsPrice\").if(body(\"stemsPrice\").exists()).isDecimal().bail(),\n  body(\"stems\").if(body(\"stems\").exists()).contains(\"stems/\").bail(),\n  body(\"image\").if(body(\"image\").exists()).contains(\"image/\").bail(),\n  // bpm numeric\n  body(\"bpm\").if(body(\"bpm\").exists()).isDecimal().bail(),\n  // description 255 characters max\n  body(\"description\").if(body(\"description\").exists()).isLength({ max: 255 }).bail(),\n  validationMiddleware,\n  beatController.edit\n);\n\nexport default router;\n", "import { Router } from \"express\";\nimport { body } from \"express-validator\";\nimport authMiddleware from \"../middlewares/auth-middleware\";\nimport mediaController from \"../controllers/media-controller\";\nimport validationMiddleware from \"../middlewares/validation-middleware\";\nconst router = Router();\n\n// getting media\nrouter.get(\"/:path/:key\", mediaController.getMedia);\n// uploading media to aws s3\nrouter.post(\"/upload\", authMiddleware, body(\"path\").notEmpty().bail(), validationMiddleware, mediaController.upload);\n\nexport default router;\n", "import { AWSError } from \"aws-sdk\";\nimport { Request, Response, NextFunction } from \"express\";\nimport { UploadedFile } from \"express-fileupload\";\nimport sharp from \"sharp\";\nimport ApiError from \"../exceptions/api-error\";\nimport mediaService from \"../services/media-service\";\n\nclass MediaController {\n  async upload(req: Request, res: Response, next: NextFunction) {\n    try {\n      const { path } = req.body;\n      if (req.files == null || !req.files.file) {\n        next(ApiError.BadRequest(\"File wasn't provided\"));\n        return;\n      }\n      const file = req.files.file as UploadedFile;\n      mediaService.validateMedia(file, path);\n      if (path === \"image\") {\n        file.data = await sharp(file.data).webp({ quality: 50 }).toBuffer();\n      }\n      // aws upload\n      const media = await mediaService.awsUpload(file, path);\n      return res.json(media.Key);\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async getMedia(req: Request, res: Response, next: NextFunction) {\n    try {\n      const { key, path } = req.params;\n      // aws getobject\n      const media = await mediaService.getMedia(`${path}/${key}`);\n      media\n        .createReadStream()\n        .on(\"error\", (error: AWSError) => {\n          if (error.code === \"AccessDenied\") {\n            next(ApiError.NotFound(\"File was not found.\"));\n          }\n        })\n        .pipe(res);\n    } catch (error) {\n      next(error);\n    }\n  }\n}\n\nexport default new MediaController();\n", "import userRouter from \"./user-router\";\nimport authorRouter from \"./author-router\";\nimport beatRouter from \"./beat-router\";\nimport mediaRouter from \"./media-router\";\nimport { Router } from \"express\";\nimport commentRouter from \"./comment-router\";\nimport tagRouter from \"./tag-router\";\n\nconst router = Router();\n\nrouter.use(\"/\", userRouter);\nrouter.use(\"/author\", authorRouter);\nrouter.use(\"/beat\", beatRouter);\nrouter.use(\"/media\", mediaRouter);\nrouter.use(\"/comment\", commentRouter);\nrouter.use(\"/tag\", tagRouter);\n\nexport default router;\n", "import { Router } from \"express\";\nimport { query, param } from \"express-validator\";\nimport commentController from \"../controllers/comment-controller\";\nimport authMiddleware from \"../middlewares/auth-middleware\";\nimport validationMiddleware from \"../middlewares/validation-middleware\";\nconst router = Router();\n\nrouter.get(\n  \"/:id\",\n  authMiddleware,\n  param(\"id\").isDecimal().bail(),\n  query(\"viewed\").if(query(\"viewed\").exists()).isDecimal().bail(),\n  validationMiddleware,\n  commentController.getComments\n);\nrouter.post(\"/delete/:id\", param(\"id\").isDecimal().bail(), validationMiddleware, commentController.deleteComment);\n\nexport default router;\n", "import { NextFunction, Request, Response } from \"express\";\nimport ApiError from \"../exceptions/api-error\";\nimport beatService from \"../services/beat-service\";\nimport commentService from \"../services/comment-service\";\n\nclass CommentController {\n  async deleteComment(req: Request, res: Response, next: NextFunction) {\n    try {\n      const userId = req.user!.id;\n      const id = +req.params.id;\n      const comment = await commentService.getCommentById(id);\n      if (comment == null) {\n        next(ApiError.NotFound(\"Comment was not found.\"));\n        return;\n      }\n      if (comment.userId !== userId) {\n        next(ApiError.UnauthorizedUser());\n        return;\n      }\n      await commentService.deleteComment(comment.id);\n      return res.json(\"success\");\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async getComments(req: Request, res: Response, next: NextFunction) {\n    try {\n      const id = +req.params.id;\n      // has error throw inside, if beat doesn't exist\n      const beat = await beatService.getBeatById(id);\n      const comments = await commentService.getComments(beat.id, req.query.viewed ? +req.query.viewed : 0);\n      return res.json({\n        comments,\n        viewed: req.query.viewed ? +req.query.viewed + comments.length : comments.length,\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n}\n\nexport default new CommentController();\n", "import { Router } from \"express\";\nimport { query } from \"express-validator\";\nimport tagController from \"../controllers/tag-controller\";\nimport validationMiddleware from \"../middlewares/validation-middleware\";\nconst router = Router();\n\nrouter.get(\n  \"/\",\n  query(\"viewed\").if(query(\"viewed\").exists()).isDecimal().bail(),\n  validationMiddleware,\n  tagController.getTags\n);\n\nexport default router;\n", "import PrismaClient from \"@prisma/client\";\n\nconst prisma = new PrismaClient.PrismaClient();\n\nclass TagService {\n  async findTags(name: string, viewed: number): Promise<PrismaClient.Tag[]> {\n    const tags = await prisma.tag.findMany({\n      where: {\n        name: {\n          contains: name,\n        },\n      },\n      take: 10,\n      skip: viewed,\n    });\n    return tags;\n  }\n\n  async getTags(viewed: number): Promise<PrismaClient.Tag[]> {\n    const tags = await prisma.tag.findMany({\n      take: 10,\n      skip: viewed,\n    });\n    return tags;\n  }\n}\n\nexport default new TagService();\n", "import PrismaClient from \"@prisma/client\";\nimport { Request, Response, NextFunction } from \"express\";\nimport tagService from \"../services/tag-service\";\n\nclass TagController {\n  async getTags(req: Request, res: Response, next: NextFunction) {\n    try {\n      let tags: PrismaClient.Tag[] | null;\n      if (req.query.name) {\n        tags = await tagService.findTags(req.query.name as string, req.query.viewed ? +req.query.viewed : 0);\n      } else {\n        tags = await tagService.getTags(req.query.viewed ? +req.query.viewed : 0);\n      }\n      return res.json({\n        tags,\n        viewed: req.query.viewed ? +req.query.viewed + tags.length : tags.length,\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n}\n\nexport default new TagController();\n", "import ApiError from \"../exceptions/api-error\";\nimport { Request, Response, NextFunction } from \"express\";\n\nexport default function (err: Error, req: Request, res: Response, next: NextFunction): Response {\n  console.log(err);\n  if (err instanceof ApiError) {\n    return res.status(err.status).json({ message: err.message, errors: err.errors });\n  }\n  return res.status(500).json({ message: \"An unexpected error occurred\" });\n}\n"],
  "mappings": "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",
  "names": ["PrismaClient", "prisma", "PrismaClient", "nanoid", "path", "nanoid", "PrismaClient", "PrismaClient", "PrismaClient", "PrismaClient", "PrismaClient", "prisma", "PrismaClient", "query", "Router", "router", "Router", "PrismaClient", "PrismaClient", "PrismaClient", "PrismaClient", "prisma", "PrismaClient", "PrismaClient", "prisma", "PrismaClient", "PrismaClient", "prisma", "PrismaClient", "query", "body", "query", "Router", "router", "Router", "body", "query", "Router", "body", "path", "router", "Router", "body", "Router", "Router", "query", "param", "router", "Router", "param", "query", "Router", "query", "PrismaClient", "prisma", "PrismaClient", "router", "Router", "query", "router", "Router"]
}
